openapi: 3.0.0
info:
  title: Travel Assistant API
  version: 1.0.0
  description: API specification for the Travel Assistant application

servers:
  - url: http://localhost:3000/api
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        preferences:
          type: object
          properties:
            budget:
              type: number
            interests:
              type: array
              items:
                type: string

    POI:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        rating:
          type: number
        photos:
          type: array
          items:
            type: string

    Itinerary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        poiSequence:
          type: array
          items:
            type: string
            format: uuid
        schedule:
          type: array
          items:
            type: object
            properties:
              poiId:
                type: string
                format: uuid
              time:
                type: string
                format: date-time

paths:
  /pois:
    get:
      summary: Get POIs by filters
      parameters:
        - name: city
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: radius
          in: query
          schema:
            type: number
        - name: rating
          in: query
          schema:
            type: number
      responses:
        '200':
          description: List of POIs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/POI'

  /pois/{id}:
    get:
      summary: Get POI details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: POI details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POI'

  /itineraries:
    post:
      summary: Create new itinerary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                poiIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                startTime:
                  type: string
                  format: date-time
                preferences:
                  type: object
      responses:
        '201':
          description: Created itinerary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'

    get:
      summary: Get user itineraries
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of itineraries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Itinerary'

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/register:
    post:
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/user:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' 